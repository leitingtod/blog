* 容器化的优点
  1. 资源共享，提升资源利用率
  2.

* K8S平台提供的特性
  1. 自动调度，当副本实例挂掉时，根据相应策略，自动重新启动
  2. 通过修改RC的副本数，实现弹性伸缩
  3. 通过逐步替换Pod，实现滚动升级
  4. 通过Label，实现多个环境版本共存
* K8S平台（生产环境）的实施
** 背景
   传统的私有云只能实现资源层面的弹性，应用层面的弹性往往通过脚本实现，而且很多
   互联网应用由于要求上线时间快，多采取单体架构进行部署，从而丧失了三个方面的灵
   活性，即：
   - 时间灵活性：应用快速迭代，缩短客户需求到产品上线的时间
   - 空间灵活性：应用弹性伸缩，应对业务量突然增长后较短时间恢复
   - 管理灵活性：易部署，易迁移，服务发现，依赖管理，自动修复，负载均衡

   相比于虚拟机实现了以资源为核心到以应用为核心的转变，用户可以通过对于应用的改
   造，实现微服务化和DevOps。


*** 第一板斧：去状态、可扩展
    原来的很多应用程序都是有状态的，所谓有状态，就是将很多数据保存在内存中和本地
    文件系统，这样的话，一旦容器宕机后被分发到其他机器上的时候，所有的状态就都不
    见了。通过将内存中的数据放在外部的缓存系统，将用户数据放在数据库中，将本地文
    件放在分布式存储系统中，通过状态的外置化，将应用程序编程仅仅包含业务逻辑的实
    体，就可以进行横向的弹性扩展，支撑大规模访问了。对于外部的数据，缓存系统，数
    据库系统，和存储系统，都有自身的高可用的机制，不需要应用层过多关心这方面的事
    情。
*** 第二板斧：容器化、可编排
    有的人将容器化和微服务化划等号，其实不是的，不仅仅微服务可以容器化，一旦去状
    态了，就可以容器化。一旦容器化，就可以使用容器编排系统kubernetes进行容器的管
    理了。

    例如一个应用包含四个服务A,B,C,D，她们相互引用，相互依赖。如果使用了
    kubernetes，则服务之间的服务发现就可以通过服务名进行了，例如A服务调用B服务，
    不需要知道B服务的IP地址，只需要在配置文件里面写入B服务服务名就可以了。如果中
    间的节点宕机了，kubernetes会自动将上面的服务在另外的机器上启动起来，容器启动
    之后，容器的IP地址就变了，但是不用担心，kubernetes会自动将服务名B和新的IP地
    址映射好，A服务并无感知。这个过程叫做自修复和自发现。如果服务B遭遇了性能瓶颈，
    三个B服务才能支撑一个A服务，也不需要特殊配置，只需要将服务B的数量设置为3，A
    还是只需要访问服务B，kubernetes会自动选择其中一个进行访问，这个过程称为弹性
    扩展和负载均衡。
*** 第三板斧：DevOps、可迭代
    在开发和运维的过程中，往往涉及开发环境，测试环境，联调环境，生产环境。如果不
    同的环境都需要脚本进行维护，成本太大，不能满足敏捷开发的要求。容器镜像的不可
    改变性可以很好的解决这一点。

    在容器的镜像中，业务代码，程序库，系统依赖，文件目录结构等，都已经打包在里面
    了，无论从哪里启动起来，都是统一的环境，只需要通过环境变量和配置文件的形式将
    不同环境的差异注入即可。而且更加优雅的是，结合上面说的编排系统，服务之间的依
    赖可以通过服务名写入配置文件，这样不同的环境不需要修改配置文件就能够找到对应
    系统的服务。结合代码管理系统，通过web hook的方式，用户提交代码，马上触发web
    hook，调用到网易蜂巢的API，则网易蜂巢会在一分钟内构建新的镜像并更新应用，接
    下来可以进行自动化测试，如果测试通过，则运维人员就可以一键更新线上生产环境了。
*** 过渡
    对于尚不能一步实现微服务化和DevOps的用户，网易蜂巢还提供了有状态容器的方式，
    通过挂在远程云盘保存状态数据的方式，使得用户方便从虚拟机模式向容器模式进行过
    度。
*** 性能优化
    　　在CaaS层面，为了支撑大规模云应用，除了应用层面的改造，容器的网络和存储性
    能也是非常重要的。
**** 网络
      在网络方面，很多容器的使用者使用默认的port mapping的方式进行网络互联，这样
      对于应用的浸入性太大。也有使用开源的如Docker Network, Flannel, Calico,
      Weave, OVS等方案，存在二次虚拟化的问题，虚拟机的网络互联是一次虚拟化，为了
      实现容器跨虚拟机互联，则需要进行二次虚拟化，大大降低性能。网易蜂巢基于SDN，
      将IaaS层的网络互联能力直接应用与容器，通过一次虚拟化就能够实现容器的扁平化
      二层互联。
**** 存储
      在存储方面，如果使用容器的统一存储策略，例如基于云盘搭建Ceph集群，也存在二
      次虚拟化的问题，云盘本身是一次虚拟化，将云盘作为普通的存储，在其上搭建Ceph
      集群，则为二次虚拟化，大大降低性能，网易蜂巢基于Ceph，将云盘直接挂在到容器
      里面，实现一次虚拟化。
*** 问题定位
    服务微服务化之后，容器数量会比较多，如果查找问题需要对于每个容器的日志进行查
    看，会比较难定位问题，网易蜂巢平台提供统一的日志收集，分析，搜索服务，用户可
    以通过关键字进行搜索，将某个订单号在各个应用中的日志全部查询出来，则问题就一
    目了然了。
*** 性能瓶颈
    性能瓶颈的定位也是一个挑战，网易蜂巢引入服务端 APM 解决细粒度性能分析，通过
    不同应用之间的调用链，迅速发掘性能瓶颈。
*** 平台性能瓶颈
    当容器规模扩大到一定程度，kubernetes的调度就成为了瓶颈，开源的kubernetes是通
    过串行队列Pod queue进行任务调度的，当任务规模比较大，但队列不能满足要求，网
    易蜂巢优化为多个优先级队列，极大提高了任务的调度速度和容器的修复速度。另外由
    于kubernetes的数据是保存在etcd里面，当容器规模扩大的时候，单个etcd集群已经不
    能满足读写性能，通过根据Pod/Node/Replication Controller等资源到拆分不同etcd
    集群，解决了集群扩展性的问题。

  用户仅仅需要关心自己的应用的开发流程，实现微服务和DevOps，至于底层的IaaS层的计
  算，网络，存储，中间的PaaS的数据库，缓存，对象存储，上层的CaaS层的持续集成、镜
  像仓库、服务发现、服务编排、日志服务、APM等，以及对外的负载均衡和CDN服务，可以
  全部交给容器平台来实现。
** 部署方案
*** 组织架构
*** 高可用
*** 持久化
*** 监控
*** 日志
*** 性能
*** 生命周期
*** 网络
*** 安全性
** 计划
   通过在部署一个研发环境的容器云平台，积累经验，最终在再部署一套生产环境的容器
   云平台。
