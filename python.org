* python xrang, range的区别
  用法完全相同，但返回的对象不同，xrange返回一个生成器，而range返回一个列表
* 两个字典如何相加
  #+begin_src python
  a = { 'a': 'a' }
  b = { 'b': 'b' }
  a.update(b)
  #+end_src
* 类
  #+begin_src python
  class MyClass:
      # 类变量
      name = 'class_var'

      # 构造方法，一个实例创建后会立即调用此函数
      # __foo__ 约定用于表示 python 内部的名字
      # _foo 约定用于表示私有变量
      # __foo 解析器会用于 _class__foo来替换，避免命名冲突
      def __init__(self):
          # 实例变量
          self.name = 'instance.var'
          # 实例私有变量
          self._sex = 'male'

          # super: 用于调用父类中的函数
          super.__init__()
          # 子类不会自动调用父类中的 __init__ 方法

      # 实例公开方法
      def instance_method(self):

      # 实例私用方法
      def __method(self):

      @staticmethod
      def static_mothod():
      # 无法调用实例方法

      @classmethod
      def class_mothod(classA):
      # 可以通过类或类实例调用，并将该class对象（不是class的实例对象）隐式地 当作
      # 第一个参数传入。不能调用实例方法。
  #+end_src
** __metaclass__
    __metaclass__ 在创建类时起作用, 元类的主要目的就是为了当创建类时能够自动地改变类.

    确实，用元类来搞些“黑暗魔法”是特别有用的，因而会搞出些复杂的东西来。但就元
    类本身而言，它们其实是很简单的：
    - 拦截类的创建
    - 修改一个类
    - 返回修改之后的类

    __new__ 在实例创建时起作用
    __init__ 在实例初始化时起作用

* 协程、线程、进程
  协程是编译器级的，线程、进程是操作系统级的。

  协程是编译器的魔术，通过插入相关的代码使代码能够实现分段式的的执行，重新开始的
  地方是通过 yield 指定。

  进程有自己独立的堆和栈，即不共享堆，也不共享栈，由OS调度。

  线程有自己独立的栈和共享堆，由OS调度。

  协程与线程一个共享堆，不共享栈，由程序员在代码里调度。

  协程避免了无意义的调度，由此可提高性能，但需程序员承担调度的责任。同时，也失去
  了线程使用多CPU的能力。


  简单点说协程是进程和线程的升级版,进程和线程都面临着内核态和用户态的切换问题而
  耗费许多切换时间,而协程就是用户自己控制切换的时机,不再需要陷入系统的内核态.

  Python里最常见的yield就是协程的思想!

* python descriptor
  REFS:
  - http://www.cnblogs.com/btchenguang/archive/2012/09/17/2689146.html#WizKMOutline_1347874388282794

  python在2.2版本中引入了descriptor功能，也正是基于这个功能实现了新式类
  (new-styel class)的对象模型，同时解决了之前版本中经典类(classic class)系统中出
  现的多重继承中的MRO(Method Resolution Order)的问题，同时引入了一些新的概念，比
  如classmethod, staticmethod, super,Property等，这些新功能都是基于descriptor

** 新式类和经典类

   新式类需要显示继承内置object或内置类型，经典类不需要（python3中若未显示指定，
   默认继承object）：
   #+begin_src python
   class NewClass(object):
     pass

   class OldClass:
     pass
   #+end_src
   使用 dir(NewClass) 查看可以看到新式类中继承了内置类的很多属性，而经典类则很少。

** object
*** __new__
    静态方法，用于创建类的实例，然后调用 __init__ 初始化实例
*** __delattr__, __getattribute__, __setattr__
    处理属性的访问
*** __hash__, __repr__, __str__
    print(obj) 会调用 obj.__str__()， 若__str__未定义，则调用 __repr__。

    __repr__ 侧重于对象信息的唯一性
    __str__ 侧重于对象的可读性，如添加一些好看的打印效果



** 类的方法
*** 静态方法
    可通过类或实例调用。

    使用 @staticmethod 标记指定
*** 类方法
    可通过类或实例调用，默认第一个参数为cls，叫做类对象，也可以用其他名字。

    使用 @classmethod 标记指定

*** 实例方法
    只能通过实例调用，默认第一个参数为self。

    通过类是无法调用实例方法的, 因其第一个参数self必须为一个实例，而且这个方法并
    未绑定到此类上，但会绑定到此类的实例上。

    实例的私有属性会覆盖掉类中定义的同名属性。

    在python中，隐式调用实例的私有特殊方法时，新的对象模型和经典对象模型表现上不
    太一样。在经典对象模型中，无论是显示调用还是隐式调用特殊方法，都会调用实例中
    后绑定的特殊方法。而在新的对象模型中，除非显式地调用实例的特殊方法，否则
    python总是会去调用类中定义的特殊方法，如果没有定义的话，就报错。

** 新式类
   新增了静态方法  __new__， 用于创建一个未初始化的实例。

   子类重写 __new__时，无需添加 @staticmethod，解释器会自动判断此方法为静态方法。

   重新绑定时，在类外执行 NewClass.__new__ = staticmethod(yourfunc) 就行了。

** 新式类的实例
   新增了 __slots__ 属性、 __getattribute__ 方法

*** __slots__
    一般每个实例都有 __dict__ 属性，也是通过这个属性，让实例支持绑定任意的属性。

    当类有较少的变量，且拥有 __slots__ 属性，则类实例就没有 __dict__ 属性，而且无
    法访问 __slots__ 中不存在的属性，也无法再绑定新的变量。这样就减少了 __dict__
    属性带来的内存消耗，在类拥有上百万的实例时，能节省大量的内存。

    使用时__slots__时需要注意的几点：
    1.  当一个类的父类没有定义__slots__属性，父类中的__dict__属性总是可以访问到的，
       所以只在子类中定义__slots__属性，而不在父类中定义是没有意义的。

    2. 如果定义了__slots属性，还是想在之后添加新的变量，就需要把'__dict__'字符串
       添加到__slots__的元组里。

    3. 定义了__slots__属性，还会消失的一个属性是__weakref__，这样就不支持实例的
       weak reference，如果还是想用这个功能，同样，可以把'__weakref__'字符串添加
       到元组里。

    4. __slots__功能是通过descriptor实现的，会为每一个变量创建一个descriptor。

    5. __slots__的功能只影响定义它的类，因此，子类需要重新定义__slots__才能有它的
       功能。

*** __getattribute__方法
    对新式类的实例来说，所有属性和方法的访问操作都是通过__getattribute__完成，这
    是由object基类实现的。如果有特殊的要求，可以重载__getattribute__方法。

** 新的对象模型
   在新的对象模型中，继承方式和经典对象模型大体相同，一个关键的区别就是新式类能
   够从python的内置类型中继承，而经典类不行。


*** 多继承
    新式类同样支持多继承，但是如果新式类想要从多个内置类型中继承生成一个新类的话，
    则这些内置类必须是经过精心设计，能够互相兼容的。显然，python也没会让你随意的
    从多个内置类中进行多继承，想创建一个超级类不是那么容易的。。。通常情况下，至
    多可以继承一个内置类，比如list, set, dict等。

*** MRO(Method Resolution Order， 方法解析顺序)
    在经典对象模型中，方法和属性的查找链是按照从左到右，深度优先的方式进行查找。
    新的对象模型采用的是从左到右，广度优先的方式进行查找。

    这是通过新式类的只读属性 __mro__ 实现的，其类型是一个元组，保存着解析顺序信
    息。只能通过类来读取。

*** super
    当子类重写了父类的一个方法时，通常会调用父类的同名方法做一些工作，这是比较常见的使用
    方式--使用非绑定语法来调用父类的方法。

    不过在多继承中，这种方法有缺馅，即类MRO的菱形问题。

    怎样才能确保父类中的方法只被顺序的调用一次呢？在新的对象系统中，有一种特殊的
    方法super(aclass, obj)，可以返回obj实例的一个特殊类型superobject(超对象， 不
    是简单的父类的对象)，当我们使用超对象调用父类的方法时，就能保证只被运行一次。
* is, ==
  Python中的对象包含三要素：id、type、value。其中id用来唯一标识一个对象，type标
  识对象的类型，value是对象的值。
  - is 判断的是a对象是否就是b对象，是通过id来判断的。
  - == 判断的是a对象的值是否和b对象的值相等，是通过value来判断的。
* GIL线程全局锁
  线程全局锁(Global Interpreter Lock),即Python为了保证线程安全而采取的独立线程运
  行的限制,说白了就是一个核只能在同一时间运行一个线程.

  解决办法就是多进程和下面的协程(协程也只是单CPU,但是能减小切换代价提升性能).
* 鸭子类型

  “当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被
  称为鸭子。”

  我们并不关心对象是什么类型，到底是不是鸭子，只关心行为。

  比如在python中，有很多file-like的东西，比如StringIO,GzipFile,socket。它们有很
  多相同的方法，我们把它们当作文件使用。

  又比如list.extend()方法中,我们并不关心它的参数是不是list,只要它是可迭代的,所以
  它的参数可以是list/tuple/dict/字符串/生成器等.

  鸭子类型在动态语言中经常使用，非常灵活，使得python不想java那样专门去弄一大堆的
  设计模式。

* 装饰器
  装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、
  性能测试、事务处理等。装饰器是解决这类问题的绝佳设计，有了装饰器，我们就可以抽
  离出大量函数中与函数功能本身无关的雷同代码并继续重用。概括的讲，装饰器的作用就
  是为已经存在的对象添加额外的功能。

* 迭代器和生成器

* Python自省
  自省就是面向对象的语言所写的程序在运行时,所能知道对象的类型.简单一句就是运行时
  能够获得对象的类型.比如type(),dir(),getattr(),hasattr(),isinstance().

* read, readline, readlines
  - read 读取整个文件
  - readline 读取下一行,使用生成器方法
  - readlines 读取整个文件到一个迭代器以供我们遍历
* Python垃圾回收机制
  Python GC主要使用引用计数（reference counting）来跟踪和回收垃圾。在引用计数的
  基础上，通过“标记-清除”（mark and sweep）解决容器对象可能产生的循环引用问题，
  通过“分代回收”（generation collection）以空间换时间的方法提高垃圾回收效率。
