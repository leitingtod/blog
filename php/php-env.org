* Deploy Env
  1. PHP 7.0
  2. Mysql 5.7
  3. Redis 3.0
  4. Nginx 1.8
  5. MongoDB 3.0
  6. BeanStalkd

* Develop Env
  1. NodeJS
  2.

* Beanstalkd
  Refs:
  1. http://blog.csdn.net/black_ox/article/details/24792489

  Beanstalkd 是一个高性能的消息队列中间件，本博文宅鸟将介绍一下这个东东的使用。

  一、先通过概念让大家了解Beanstalkd的特性和工作场景。

  Beanstalkd 是一个轻量级消息中间件，它最大特点是将自己定位为基于管道 (tube) 和
  任务 (job) 的工作队列 (work-queue)：


  Beaanstalkd 支持任务优先级 (priority), 延时 (delay), 超时重发 (time-to-run) 和
  预留 (buried), 能够很好的支持分布式的后台任务和定时任务处理。

  它的内部实现采用 libevent, 服务器-客户端之间用类似 memcached 的轻量级通讯协议，
  具有有很高的性能。

  尽管是内存队列, beanstalkd 提供了 binlog 机制, 当重启 beanstalkd 时，当前任务
  状态能够从纪录的本地 binlog 中恢复。



  管道 (tube):管道类似于消息主题 (topic), 在一个 Beanstalkd 中可以支持多个管道,
  每个管道都有自己的发布者 (producer) 和消费者 (consumer). 管道之间互相不影响。

  任务 (job): Beanstalkd 用任务 (job) 代替消息 (message) 的概念。与消息不同，任
  务有一系列状态：

  1. READY- 需要立即处理的任务，当延时 (DELAYED) 任务到期后会自动成为当前任务；
  2. DELAYED- 延迟执行的任务, 当消费者处理任务后, 可以用将消息再次放回 DELAYED
     队列延迟执行；
  3. RESERVED- 已经被消费者获取, 正在执行的任务。Beanstalkd 负责检查任务是否在
     TTR(time-to-run) 内完成；
  4. BURIED- 保留的任务: 任务不会被执行，也不会消失，除非有人把它 "踢" 回队列；
  5. DELETED- 消息被彻底删除。Beanstalkd 不再维持这些消息。




  Beanstalkd 不足:

  Beanstalkd 没有提供主备同步 + 故障切换机制, 在应用中有成为单点的风险。实际应用
  中，可以用数据库为任务 (job) 提供持久化存储。

  另外, 和 memcached 类似, Beanstalkd 依赖 libevent 的单线程事件分发机制, 不能有
  效利用多核 cpu 的性能。这一点可以通过单机部署多个实例克服。

* Supervisor
  Supervisor (http://supervisord.org) 是一个用 Python 写的进程管理工具，可以很方
  便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。除了对单个进程的控制，还
  可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，
  此时可以用 supervisor 同时启动所有应用程序而不是一个一个地敲命令启动。

* Xhprof
  Xhprof是facebook开源出来的一个php轻量级的性能分析工具，跟Xdebug类似，但性能开
  销更低，还可以用在生产环境中，也可以由程序开关来控制是否进行profile。

* Rundeck
  RunDeck 是用 Java/Grails 写的开源工具，帮助用户在数据中心或者云环境中自动化各
  种操作和流程。通过命令行或者web界面，用户可以对任意数量的服务器进行操作，大大降
  低了对服务器自动化的门槛。

  RunDeck的作用：

  在浏览器中执行服务器上任何非交互命令，比如ps, /etc/init.d/xxx restart，注意ssh
  之类的要在执行中输入密码的肯定不支持

  对接服务器上的一键运维脚本，变成一个Job, 执行时只要点击按钮Run

  自动记录命令操作记录和输出。
* AMP(Application Performance Management)
  Refs:
  1. https://www.evget.com/article/2016/5/20/24128.html

  APM Tools:
  1. New Relic
  2. AppDynamics
  3. SmartBear
  4. Dynatrace
  5. Rollbar
* PECL :: The PHP Extension Community Library
* Composer
  Ref: https://getcomposer.org/download/
* Php-cli or Php-fpm
  Refs:
  1. https://www.cnblogs.com/orlion/p/5282753.html
  2. https://segmentfault.com/q/1010000000256516

  php的几种运行模式CLI、CGI、FastCGI、mod_php.

  php-fpm是一个多进程架构的FastCGI服务,内置php解释器,进程后台常驻,自带进程管理器,支
  持进程池配置,多配合Nginx使用.

  Linux上自行编译的PHP默认是非线程安全的,什么时候需要线程安全呢? 比如你要使用
  pthreads这个PHP多线程PECL扩展,或者你的PHP跑在一个多线程的容器内,比如Apache
  event MPM,这是一个多线程的MPM.

** CLI
   Refs:
   1. http://php.net/manual/zh/features.commandline.php

   从版本 4.3.0 开始，PHP 提供了一种新类型的 CLI SAPI（Server Application
   Programming Interface，服务端应用编程端口）支持，名为 CLI，意为 Command Line
   Interface，即命令行接口。顾名思义，该 CLI SAPI 模块主要用作 PHP 的开发外壳应
   用。CLI SAPI 和其它 CLI SAPI 模块相比有很多的不同之处，我们将在本章中详细阐述。
   值得一提的是，CLI 和 CGI 是不同的 SAPI，尽管它们之间有很多共同的行为。

   PHP 的命令行模式能使得 PHP 脚本能完全独立于 web 服务器单独运行。如果使用 Unix
   系统，需要在 PHP 脚本的最前面加上一行特殊的代码，使得它能够被执行，这样系统就
   能知道用哪个程序去运行该脚本。在 Windows 平台下可以将 php.exe 和 .php 文件的
   双击属性相关联，也可以编写一个批处理文件来用 PHP 执行脚本。为 Unix 系统增加的
   第一行代码不会影响该脚本在 Windows 下的运行，因此也可以用该方法编写跨平台的脚
   本程序。以下是一个简单的 PHP 命令行程序的范例。
** FPM
   那PHP-FPM又是什么呢？是一个实现了Fastcgi的程序，被PHP官方收了。

   大家都知道，PHP的解释器是php-cgi。php-cgi只是个CGI程序，他自己本身只能解析请
   求，返回结果，不会进程管理（皇上，臣妾真的做不到啊！）所以就出现了一些能够调
   度php-cgi进程的程序，比如说由lighthttpd分离出来的spawn-fcgi。好了PHP-FPM也是
   这么个东东，在长时间的发展后，逐渐得到了大家的认可（要知道，前几年大家可是抱
   怨PHP-FPM稳定性太差的），也越来越流行。


   有的说，php-fpm是fastcgi进程的管理器，用来管理fastcgi进程的? 对。php-fpm的管
   理对象是php-cgi。但不能说php-fpm是fastcgi进程的管理器，因为前面说了fastcgi是
   个协议，似乎没有这么个进程存在，就算存在php-fpm也管理不了他（至少目前是）。
   有的说，php-fpm是php内核的一个补丁

   以前是对的。因为最开始的时候php-fpm没有包含在PHP内核里面，要使用这个功能，需
   要找到与源码版本相同的php-fpm对内核打补丁，然后再编译。后来PHP内核集成了
   PHP-FPM之后就方便多了，使用--enalbe-fpm这个编译参数即可。
