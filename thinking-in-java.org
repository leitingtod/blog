* 隐藏
  从功能（或类、或函数）设计者的角度来说，只向使用者暴露必须的部分是必要的，这意
  味着可以任意修改隐藏的部分，这是直观的、显而易见的事情。

  但实际的情况是，计划不如变化，如何快速地响应变化，是各种抽象技术要解决的问题。

  基于对客户隐藏不必要的部分的考虑，随之就需要解决如何实现的问题。

  C在隐藏这个特性上，提供了static关键字，可实现模块间的数据的隐藏。

  C++的类，通过private, protect, public实现的数据的访问控制，但只是编译器级的。

  Java的类的访问控制的关键字与C++相同，但是否是在运行时进行控制，有待证实。

  从这点看，由于Java在运行时做了更多的检查，导致性能上的损失是无法弥补的。
** 总结
   隐藏实现了2个目标：
   1. 只开放必要的接口给用户
   2. 接口不变的情况下，设计者可以任意修改未对用户开放的部分
* 复用
** 组合
   最简单的复用就是直接使用一个函数或一个类。这种概念称为组合（或聚合）， 是
   has-a 的一种关系。

   UML中使用实心菱形指向A，另一端指向B表示 A has a B 的关系。

   组合仅仅是将各个类组合使用，而不涉及类、接口的变化，因此有很大的灵活性。

** 继承
   有了类，结构这些抽象的手段，实际中面临的一个重要的问题即是两个类（或结构）
   具有相似的结构或功能，如何实现复用呢？

   继承是一个方法。但同时也有副作用，当父类变化时，子类也会反映出这些变化。若这
   个变化仅仅是针对一个类而引入的，则显然是不合理的。从这点看，在使用继承实现复
   用的时候，要仔细考虑复用的部分是否是针对所有的子类：
   1. 若不是，则加到对应的子类，不要加到父类，影响其他子类
   2. 若是，则显然加到父类更合适

   若针对的子类超过了一半，加到父类还是子类，显然，是重新考虑这个家族类的设计了。

   子类对父类的复用有2种方式：
   1. 当父类的行为不满足需要时，对父类的行为进行覆盖
   2. 添加新的方法

   这两种方式的复用引出了两种关系：
   - is-a

     当继承只覆盖父类的方法时，子类、父类是完全相同的类型，因为具体完全相同的接
     口，是处理继承的理想方式。

   - is-like-a

     当子类添加新的接口后，子类仍可以替代父类，当不完美，因为父类无法访问子类的
     新接口。

**** 对层次结构的处理
     把子类当作父类来对待，可以编写出不依赖特定类型的的代码。这们的代码不受新添
     加的类型的影响，而添加新的类型是OOP处理新情况的常用方式。

     然而终归是要执行特定类型的功能的，但在编译时肯定是无法知道哪一个特定类型要
     执行。因此编译期产生函数调用采用的前期绑定的手段无法解决这个问题。由于在运
     行时才能确定要执行了函数，采用后期绑定的手段可以解决这问题。编译器确保被调
     用函数的存在，并进行参数、返回值类型检查。

**** 单根或多根继承

**** 向上、向下转型

* 泛型（参数化类型）
  除非确切知道所要转换的对象类型，否则向下转型几乎是不安全的。向下转型和运行时的
  检查需要额外的运行时间。如果知道要转换的对象类型，从而不需要向下转型并消除犯错
  的可能，不是就解决了吗？这种解决方案就是参数化类型机制。

* 对象的创建和生命周期
